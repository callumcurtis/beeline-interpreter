/*
 * This file was generated by the generate_ast.py script.
 */

#include <variant>
#include <memory>

#include "lexer.hpp"


class Visitor;


struct Expression
{
    virtual void accept(Visitor& visitor) const = 0;
};


struct Binary : Expression
{
    void accept(Visitor& visitor) const override;
    const std::unique_ptr<Expression> left;
    const Token op;
    const std::unique_ptr<Expression> right;
};


struct Grouping : Expression
{
    void accept(Visitor& visitor) const override;
    const std::unique_ptr<Expression> expression;
};


struct Literal : Expression
{
    void accept(Visitor& visitor) const override;
    const std::variant<std::nullptr_t, std::string, double, bool> value;
};


struct Unary : Expression
{
    void accept(Visitor& visitor) const override;
    const Token op;
    const std::unique_ptr<Expression> right;
};


class Visitor
{
public:
    virtual void visit(const Expression& expression) = 0;
    virtual void visit(const Binary& binary) = 0;
    virtual void visit(const Grouping& grouping) = 0;
    virtual void visit(const Literal& literal) = 0;
    virtual void visit(const Unary& unary) = 0;
};
